module PublicKeyTests

open System
open System.Security.Cryptography
open Expecto
open SshCA
open TestData

[<Tests>]
let tests =
    testList "Public Key Tests" [
        test "Parse OpenSSH Public Key File" {
            let publicKey = PublicKey.OfSshPublicKey testSshKey
            Expect.equal
                publicKey.Algorithm
                "ssh-rsa"
                "Incorrect algorithm"
            Expect.equal
                (publicKey.Exponent |> Convert.ToHexString)
                "010001"
                "Incorrect exponent"
            Expect.equal
                (publicKey.Modulus |> Convert.ToHexString)
                "00D233CA5C8CFE24294C63F82434E49D0D2F47992A1DBB59D41123100A178B17546327EE2145B79208764EA63B5305EA06DE52CB96CB68F6B6624CC385865A15FF36D8D0C5F814904A9257651AA1291097395E20B462DDBFDBBACC74C7113956BD577058A63879750638522A88CC6B46AAC3D121CFB44DAA042669F2C7B199922C695759044F31EA74B385FFC3646CB57249FA1F0F8736DA8CF0F3558E790E21BB5DD3BBC1AC4845E175A751020E48DC8D58B9B2A8F48E99E2D1299D14CEBD86CAC87D31A16CC83EF5FFAC15DBEC92452D1BAC4F393EC61E5F856582D0E139C00D6433FE90EF4526AB8370A59880BDFD8D3488125970334356B939B68E536EEFAC4002656195B2E8E692D02AC05321C52F564105614E77C7616ADAF498933E88DACB42C400E9D6862A600F05227621C8A4882A5CA89D7BF517DF39B3A3EFD58F6E999632B5B9798AA2F0AB2CA99A8E2B5E520D0B603A7386CA7071647C61DD0D87C2F681156EAF05DA94865F3B116B30EF116A9564AE292C6323B18CDC547074EF"
                $"Incorrect modulus"
            Expect.isNotNull publicKey.Comment "OpenSSH key should have comment."
            Expect.equal
                publicKey.Comment
                "user@domain.local"
                "Incorrect comment"
        }
        test "Parse PEM Public Key File" {
            let publicKey = testSshKeyPem |> PublicKey.OfRsaPublicKeyPem
            Expect.equal
                (publicKey.Exponent |> Convert.ToHexString)
                "010001"
                "Incorrect exponent"
            Expect.equal // Modulus from RSA will not have 0 (NULL) byte at the beginning that the ssh key does.
                (publicKey.Modulus |> Convert.ToHexString)
                "00D233CA5C8CFE24294C63F82434E49D0D2F47992A1DBB59D41123100A178B17546327EE2145B79208764EA63B5305EA06DE52CB96CB68F6B6624CC385865A15FF36D8D0C5F814904A9257651AA1291097395E20B462DDBFDBBACC74C7113956BD577058A63879750638522A88CC6B46AAC3D121CFB44DAA042669F2C7B199922C695759044F31EA74B385FFC3646CB57249FA1F0F8736DA8CF0F3558E790E21BB5DD3BBC1AC4845E175A751020E48DC8D58B9B2A8F48E99E2D1299D14CEBD86CAC87D31A16CC83EF5FFAC15DBEC92452D1BAC4F393EC61E5F856582D0E139C00D6433FE90EF4526AB8370A59880BDFD8D3488125970334356B939B68E536EEFAC4002656195B2E8E692D02AC05321C52F564105614E77C7616ADAF498933E88DACB42C400E9D6862A600F05227621C8A4882A5CA89D7BF517DF39B3A3EFD58F6E999632B5B9798AA2F0AB2CA99A8E2B5E520D0B603A7386CA7071647C61DD0D87C2F681156EAF05DA94865F3B116B30EF116A9564AE292C6323B18CDC547074EF"
                $"Incorrect modulus"
        }
        test "RSA to OpenSSH" {
            let exponent = Convert.FromHexString "010001"
            let modulus = Convert.FromHexString "9CBFEA68EE2BAE92903BCD8296718E680C4D34928E05C3EB185861BBAA051E57523399FB443EBC04F963A53A623B42959BD1E6F06DFA240C12BEC0EECBF5C4953DFA7F016F46271C1C127353F6E3D314A25176819EFFB581DDB6D559908EABFD1CC95709FCEA28C213C7202DD506924A1E57C4F20F08B15FEB1A20B0B78F1066223A1AE5C60C539B824A52DF2C5364EAD4E0780D646EDA78012C9B7E0E10EFA6DA9AC9CC86044C0110232B795C5BD8E36E83607611B572E468A19888A1A65278F90BDD820BE29982EDD53560569F34AB946A92A131C1F9248CB3FD3FCD8B4C2AAF69951930902579DED1A8E1143BEFB2047638D9A7B1F3AA72A41070F297337F"
            let parameters = RSAParameters(Exponent=exponent, Modulus=modulus)
            use rsa = RSA.Create(parameters)
            let publicKey = rsa.ExportRSAPublicKeyPem() |> PublicKey.OfRsaPublicKeyPem
            let sshKey = publicKey |> PublicKey.ToSshPublicKey
            Expect.equal
                sshKey
                "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCcv+po7iuukpA7zYKWcY5oDE00ko4Fw+sYWGG7qgUeV1IzmftEPrwE+WOlOmI7QpWb0ebwbfokDBK+wO7L9cSVPfp/AW9GJxwcEnNT9uPTFKJRdoGe/7WB3bbVWZCOq/0cyVcJ/OoowhPHIC3VBpJKHlfE8g8IsV/rGiCwt48QZiI6GuXGDFObgkpS3yxTZOrU4HgNZG7aeAEsm34OEO+m2prJzIYETAEQIyt5XFvY426DYHYRtXLkaKGYiKGmUnj5C92CC+KZgu3VNWBWnzSrlGqSoTHB+SSMs/0/zYtMKq9plRkwkCV53tGo4RQ777IEdjjZp7HzqnKkEHDylzN/"
                "Generated SSH key did not match expected."
        }
        test "OpenSSH to RSA" {
            let publicKey = PublicKey.OfSshPublicKey testSshKey
            use rsa = publicKey |> PublicKey.ToRsaPublicKey
            let rsaPubKey = rsa.ExportParameters(false)
            Expect.equal
                (rsaPubKey.Exponent |> Convert.ToHexString)
                "010001"
                "Incorrect exponent"
            Expect.equal // Modulus from RSA will not have 0 (NULL) byte at the beginning that the ssh key does.
                (rsaPubKey.Modulus |> Convert.ToHexString)
                "D233CA5C8CFE24294C63F82434E49D0D2F47992A1DBB59D41123100A178B17546327EE2145B79208764EA63B5305EA06DE52CB96CB68F6B6624CC385865A15FF36D8D0C5F814904A9257651AA1291097395E20B462DDBFDBBACC74C7113956BD577058A63879750638522A88CC6B46AAC3D121CFB44DAA042669F2C7B199922C695759044F31EA74B385FFC3646CB57249FA1F0F8736DA8CF0F3558E790E21BB5DD3BBC1AC4845E175A751020E48DC8D58B9B2A8F48E99E2D1299D14CEBD86CAC87D31A16CC83EF5FFAC15DBEC92452D1BAC4F393EC61E5F856582D0E139C00D6433FE90EF4526AB8370A59880BDFD8D3488125970334356B939B68E536EEFAC4002656195B2E8E692D02AC05321C52F564105614E77C7616ADAF498933E88DACB42C400E9D6862A600F05227621C8A4882A5CA89D7BF517DF39B3A3EFD58F6E999632B5B9798AA2F0AB2CA99A8E2B5E520D0B603A7386CA7071647C61DD0D87C2F681156EAF05DA94865F3B116B30EF116A9564AE292C6323B18CDC547074EF"
                $"Incorrect modulus"
        }
    ]
